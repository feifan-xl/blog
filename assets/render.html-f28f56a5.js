import{_ as e,o as i,c as a,e as l}from"./app-5e6e879c.js";const r={},t=l('<h2 id="browser-rending-process" tabindex="-1"><a class="header-anchor" href="#browser-rending-process" aria-hidden="true">#</a> browser rending process</h2><p>当浏览器进程获取到 HTML 的第一个字节开始，会通知渲染进程开始解析 HTML，将 HTML 转换成 DOM 树，并进入渲染流程。一般所有的浏览器都会经过五大步骤，分别是：</p><ol><li>PARSE：解析 HTML，构建 DOM 树。</li><li>STYLE：为每个节点计算最终的有效样式。</li><li>LAYOUT：为每个节点计算位置和大小等布局信息。</li><li>PAINT：绘制不同的盒子，为了避免不必要的重绘，将会分成多个层进行处理。</li><li>COMPOSITE &amp; RENDER：将上述不同的层合成为一张位图，发送给 GPU，渲染到屏幕上。</li></ol><h3 id="parse" tabindex="-1"><a class="header-anchor" href="#parse" aria-hidden="true">#</a> Parse</h3><h4 id="解析-html-构建-dom-tree" tabindex="-1"><a class="header-anchor" href="#解析-html-构建-dom-tree" aria-hidden="true">#</a> 解析 HTML 构建 DOM tree</h4><ol><li>Conversion(转换): 浏览器从网络或磁盘读取 html 文件原始字节,根据指定文件编码(如 UTF-7)将字节转换为字符</li><li>Tokenizing(分词解析): 浏览器根据 HTML 规范将字符串转换为不同的 token (标记)（如 html, body）</li><li>Lexing(语法分析): token 将被转换为对象，这些node 对象包含了 HTML 语法的各种信息，如属性、属性值、文本等</li><li>DOM construction(DOM构建): 将上一步产生的节点对象链接在一起，构成一个树状结构(DOM tree)</li></ol><h4 id="预扫描加载器" tabindex="-1"><a class="header-anchor" href="#预扫描加载器" aria-hidden="true">#</a> 预扫描加载器</h4><p>在主线程构建 DOM tree 时，预加载扫描器将解析可用的内容并请求资源, 如 CSS、JS、web 字体，以此来减少加载带来的阻塞</p><h4 id="javascript-可能阻塞解析" tabindex="-1"><a class="header-anchor" href="#javascript-可能阻塞解析" aria-hidden="true">#</a> Javascript 可能阻塞解析</h4><p>在 HTML 解析器发现 script 标签时，会暂停解析，转而下载、解析和执行 js (因为js可能会改变 dom 结构)<br> 为此可使用<code>defer</code>或<code>async</code>属性，或将script标签放在 body 标签结束前</p><h4 id="css-阻塞" tabindex="-1"><a class="header-anchor" href="#css-阻塞" aria-hidden="true">#</a> css 阻塞？</h4><p>CSSOM 和 DOM 是并行构建的，构建 CSSOM 不会阻塞 DOM 的构建。但 CSSOM 会阻塞 JS 的执行，因为 JS 可能会操作样式信息。虽然 CSSOM 不会阻塞 DOM 的构建，但在进入下一阶段之前，必须等待 CSSOM 构建完成。这也是通常所说的 CSSOM 会阻塞渲染。</p><h3 id="style" tabindex="-1"><a class="header-anchor" href="#style" aria-hidden="true">#</a> Style</h3><p>css 引擎处理样式过程分为三个阶段:</p><ol><li>收集、划分和索引所有样式表中存在的样式规则. CSS 引擎会从 Style 标签、css文件及浏览器代理样式中收集所有样式规则，并为这些规则建立索引，以方便后续的高效查询</li><li>访问每个元素并找到适用于该元素的给规则. css 引擎遍历 dom 节点，进行选择器匹配， 并为匹配的节点执行样式设置</li><li>结合层叠规则和其他信息为节点生成最终的计算样式，这些样式的值可以通过 window.getComputedStyle() 获取</li></ol><p>这个附加了计算样式的 dom tree， 就是 cssom(css object model)</p><h3 id="layout" tabindex="-1"><a class="header-anchor" href="#layout" aria-hidden="true">#</a> Layout</h3><p>有了 DOM 树和 DOM 树中元素的计算样式后，浏览器会根据这些信息合并成一个 layout 树，收集所有可见的 DOM 节点，以及每个节点的所有样式信息。</p><p>Layout 树和 DOM 树不一定是一一对应的，为了构建 Layout 树，浏览器主要完成了下列工作：</p><ol><li>从 DOM 树的根节点开始遍历每个可见节点 <ul><li>某些不可见节点（例如 script、head、meta 等），它们不会体现在渲染输出中，会被忽略。</li><li>某些通过设置 display 为 none 隐藏的节点，在渲染树中也会被忽略。</li><li>为伪元素创建 LayoutObject。</li><li>为行内元素创建匿名包含块对应的 LayoutObject。</li></ul></li><li>对于每个可见节点，为其找到适配的 CSSOM 规则并应用它们。</li><li>产出可见节点，包含其内容和计算的样式。</li></ol><h4 id="布局计算" tabindex="-1"><a class="header-anchor" href="#布局计算" aria-hidden="true">#</a> 布局计算</h4><p>浏览器的布局计算工作包含以下内容：</p><ol><li>根据 CSS 盒模型及视觉格式化模型，计算每个元素的各种生成盒的大小和位置。</li><li>计算块级元素、行内元素、浮动元素、各种定位元素的大小和位置。</li><li>计算文字，滚动区域的大小和位置。</li><li>LayoutObject 有两种类型： <ul><li>传统的 LayoutObject 节点，会把布局运算的结果重新写回布局树中。</li><li>LayoutNG（Chrome 76 开始启用） 节点的输出是不可变的，会保存在 NGLayoutResult 中，这是一个树状的结构，相比之前的 LayoutObject，少了很大回溯计算，提高了性能。</li></ul></li></ol><h3 id="paint" tabindex="-1"><a class="header-anchor" href="#paint" aria-hidden="true">#</a> Paint</h3><p>LayoutObject 树转换成供合成器使用的高效渲染格式</p><h4 id="构建-paintlayer-renderlayer-树" tabindex="-1"><a class="header-anchor" href="#构建-paintlayer-renderlayer-树" aria-hidden="true">#</a> 构建 PaintLayer（RenderLayer） 树</h4><p>构建完成的 LayoutObject 树还不能拿去显示，因为它不包含绘制的顺序（z-index）。同时，也为了考虑一些复杂的情况，如 3D 变换、页面滚动等，浏览器会对上一步的节点进行分层处理。这个处理过程被称为建立层叠上下文。</p><p>将页面分层，可以让一个图层独立于其他的图层进行变换和光栅化处理。</p><h3 id="compositing" tabindex="-1"><a class="header-anchor" href="#compositing" aria-hidden="true">#</a> Compositing</h3><p>将 layer 进行分块 光栅化， 传个gpu 进行渲染</p><h4 id="tiling-rater" tabindex="-1"><a class="header-anchor" href="#tiling-rater" aria-hidden="true">#</a> tiling &amp; rater</h4><ol><li>tiling：将 layer 分成 tiles（图块）。 因为有的 layer 可能很大（如整个文档的滚动根节点），对整层的光栅化操作代价昂贵，且 layer 中有的部分是不可见的，会造成不必要的浪费。</li><li>tiles 是光栅化的基本单元。光栅化操作是通过光栅线程池处理的。离视口更近的 tiles 具有更高的优先级，将优先处理。</li><li>一个 layer 实际上会生成多种分辨率的 tiles。</li><li>raster 同样也会处理页面引用的图片资源，display items 中的 paint ops 引用了这些压缩数据，raster 会调用合适的解码器来解压这些数据。</li><li>raster 会通过 Skia 来进行 OpenGL 调用，光栅化数据。</li><li>渲染进程是运行在沙箱中的，不能直接进行系统调用。paint ops 通过 IPC（MOJO）传递给 GPU 进程，GPU 进程会执行真实的 OpenGL（为了保证性能，在 Windows 上转为 DirectX）调用。</li><li>光栅化的位图结果保存在 GPU 内存中，通常作为 OpenGL 材质对象保存。</li><li>双缓冲机制：主线程随时会有 commit 到来，当前的光栅化行为在 pending tree（LayerImpl）上进行，一旦光栅化操作完成，将 pending tree 变为 active tree，后续的 draw 操作在 active tree 上进行。</li></ol><blockquote><p>https://febook.hzfe.org/awesome-interview/book2/browser-render-mechanism https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work https://segmentfault.com/a/1190000023609412</p></blockquote><h2 id="repaint-reflow" tabindex="-1"><a class="header-anchor" href="#repaint-reflow" aria-hidden="true">#</a> repaint &amp; reflow</h2><h3 id="什么是重排重绘" tabindex="-1"><a class="header-anchor" href="#什么是重排重绘" aria-hidden="true">#</a> 什么是重排重绘</h3><p>浏览器渲染由获取资源到绘制好图形， 会经历几个阶段: parseHtml -&gt; layout -&gt; paint -&gt; composite</p><ul><li>Parse HTML：相关引擎分别解析文档和样式表以及脚本，生成 DOM 和 CSSOM ，最终合成为 Render 树。</li><li>Layout：浏览器通过 Render 树中的信息，以递归的形式计算出每个节点的尺寸大小和在页面中的具体位置。</li><li>Paint：浏览器将 Render 树中的节点转换成在屏幕上绘制实际像素的指令，这个过程发生在多个图层上。</li><li>Composite：浏览器将所有层按照一定顺序合并为一个图层并绘制在屏幕上。</li></ul><p>当dom或cssom 被修改时， 会导致浏览器重复执行 layout paint 步骤，就被成为重绘和重排</p><h3 id="引起重排-重绘的常见操作" tabindex="-1"><a class="header-anchor" href="#引起重排-重绘的常见操作" aria-hidden="true">#</a> 引起重排/重绘的常见操作</h3><p>重绘: 外观变化时， 如color opacity等<br> 重排:</p><ul><li>布局结果或节点内容变化时，如height float position <ul><li>盒子尺寸类型</li><li>定位 (正常流，浮动和决定定位)</li><li>文档树中元素之间的关系变化</li><li>外部信息(视口大小)</li></ul></li><li>获取布局信息时， 如 offsetTop getComputedStyle</li></ul><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h3><ul><li>对 DOM 进行批量写入和读取（通过虚拟 DOM 或者 DocumentFragment 实现）。</li><li>避免对样式频繁操作，了解常用样式属性触发 Layout / Paint / Composite 的机制，合理使用样式。</li><li>合理利用特殊样式属性（如 transform: translateZ(0) 或者 will-change），将渲染层提升为合成层，开启 GPU 加速，提高页面性能。</li><li>使用变量对布局信息（如 clientTop）进行缓存，避免因频繁读取布局信息而触发重排和重绘。</li><li>需要多次重排的元素 positon 为absolute fixed， 脱离文档流，就不回影响其他元素</li><li>display none</li></ul><h3 id="为什么操作dom-慢" tabindex="-1"><a class="header-anchor" href="#为什么操作dom-慢" aria-hidden="true">#</a> 为什么操作dom 慢</h3><p>dom是渲染线程中,js是js引擎线程中，操作涉及两个线程间的通信,性能上有损耗<br> 而且操作dom会触发渲染线程的重绘回流，增加损耗</p>',45),o=[t];function d(n,s){return i(),a("div",null,o)}const c=e(r,[["render",d],["__file","render.html.vue"]]);export{c as default};

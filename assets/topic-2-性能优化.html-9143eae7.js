import{_ as n,o as a,c as s,e as t}from"./app-5e6e879c.js";const l={},e=t(`<h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><h2 id="debounce-throttle" tabindex="-1"><a class="header-anchor" href="#debounce-throttle" aria-hidden="true">#</a> debounce &amp; throttle</h2><p>debounce 防抖:ns内只执行一次, 如果触发重新计算时间 - 服务端校验 - 提交按钮 防止多次提交</p><p>throttle 节流: ns内只触发一次 - 拖拽 短时间内只执行一次 - 缩放 resize - 动画 短时间内多次影响性能</p><p><em>debounce</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>   
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>throttle</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer 
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多图站点性能优化" tabindex="-1"><a class="header-anchor" href="#多图站点性能优化" aria-hidden="true">#</a> 多图站点性能优化</h2><p>主要策略:</p><ol><li>图片优化: 图片压缩/缩放和选择正确的格式</li><li>网络传输优化: 使用http2和 CDN 服务</li><li>图片加载策略优化: 按需使用 懒加载，预加载，响应式图片加载等策略</li></ol><h3 id="图片优化" tabindex="-1"><a class="header-anchor" href="#图片优化" aria-hidden="true">#</a> 图片优化</h3><ol><li><p>合适的图片格式</p><ul><li>jpeg 有损压缩 但不影响</li><li>png 透明</li><li>gif</li><li>webp</li><li>svg</li></ul></li><li><p>图片压缩</p></li></ol><h3 id="网络传输优化" tabindex="-1"><a class="header-anchor" href="#网络传输优化" aria-hidden="true">#</a> 网络传输优化</h3><ol><li>减少请求数量 <ul><li>sprite</li><li>base64</li><li>多个域名，开启多个TCP链接, 突破浏览器同源最大并发连接数限制</li></ul></li><li>http2 支持多路复用</li><li>使用CDN</li></ol><h3 id="图片加载策略优化" tabindex="-1"><a class="header-anchor" href="#图片加载策略优化" aria-hidden="true">#</a> 图片加载策略优化</h3><ol><li><p>懒加载</p><ul><li>img 标签的 loading 属性，lazy 在可见后加载， 兼容性ie否</li><li>intersection Observer API 兼容性</li><li>scroll resize 等事件</li></ul></li><li><p>预加载</p><ul><li><code>&lt;link rel=&quot;preload&quot; as=&quot;image&quot; href=&quot;important.png&quot; /&gt;</code> 允许开发者在 HTML 的 head 标签中声明资源请求，指定页面需要预加载的资源，并且在浏览器的主要渲染机制启动之前加载，避免阻塞页面渲染且保证资源尽早可用</li><li>动态场景</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 动态创建 Image</span>
    <span class="token keyword">function</span> <span class="token function">preloadImage</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>响应式图片加载: 根据屏幕分辨率 选择对应大小的图片</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hzfe-avatar-desktop.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(min-width: 990px)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hzfe-avatar-tablet.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(min-width: 750px)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hzfe-avatar.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hzfe-default-avatar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="减少白屏时间" tabindex="-1"><a class="header-anchor" href="#减少白屏时间" aria-hidden="true">#</a> 减少白屏时间</h2><h3 id="性能指标" tabindex="-1"><a class="header-anchor" href="#性能指标" aria-hidden="true">#</a> 性能指标</h3><p>Navigation Timing API and Lighthouse Performance</p><p>Lighthouse Performance:</p><ol><li>TTFB(time to First Byte) 浏览器接收第一个字节的时间</li><li>FP(first paint) 首次内容绘制，仅有一个div根节点</li><li>FCP(first content paint) 首次有内容的绘制，页面基本框架，但没有数据</li><li>FMP(first meaning paint) 首次有意义的绘制</li><li>TTI:Time To interactive 可交互时间</li><li>Long tasks:超过50ms的任务</li><li>SSR &amp;&amp; CSR:服务端渲染和客户端渲染</li><li>Isomorphic JS:同构化</li></ol><h3 id="加载慢原因及方案" tabindex="-1"><a class="header-anchor" href="#加载慢原因及方案" aria-hidden="true">#</a> 加载慢原因及方案</h3><ol><li>资源加载问题 <ol><li>速度慢 <ul><li>优化加载速度 <ul><li>rel dns-prefetch</li><li>preconnect</li><li>http2</li></ul></li><li>预加载 <ul><li>preload</li></ul></li><li>http请求数量多 <ul><li>资源合并 <ul><li>sprite</li><li>icon svg等打包进js css</li><li>小文件合并</li></ul></li></ul></li></ul></li><li>文件大 <ul><li>压缩 <ul><li>html 压缩 html-minifier</li><li>js 压缩 uglify-js</li><li>css 压缩 clean-css</li><li>gzip</li><li>图片的优化 <ul><li>图片格式 <ul><li>jpg jpeg png webp base64</li></ul></li><li>图片压缩</li></ul></li></ul></li><li>懒加载 延迟 异步</li><li>分包</li></ul></li><li>缓存 <ul><li>强缓存</li><li>协商缓存</li><li>service woker</li></ul></li></ol></li><li>渲染问题 <ul><li>DOM 操作的优化</li><li>渲染应用 <ul><li>lazy load</li><li>load before</li><li>debounce throttle</li><li>debounce 防抖 最后一个人说的算</li><li>throttle 节流 第一个人说的算</li><li>异步线程</li><li>script 标签 defer async</li><li>defer 异步下载 domContentLoaded 事件前执行</li><li>async 异步下载 下载后执行</li><li>preload 预下载 下载后并不执行 需要时执行</li><li>prefetch 预判下载 闲时下载</li></ul></li><li>ssr</li></ul></li></ol><p>参考: https://alienzhou.github.io/fe-performance-journey/</p><ol><li>网络延时问题</li><li>资源文件体积是否过大</li><li>资源是否重复发送请求</li><li>加载脚本时,渲染内容堵塞了</li></ol><h3 id="主要流程" tabindex="-1"><a class="header-anchor" href="#主要流程" aria-hidden="true">#</a> 主要流程</h3><ol><li>dns 解析优化, 提前获取 IP 地址 <code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;&quot; /&gt;</code></li><li>TCP 连接优化 <code>&lt;link href=&quot;https:&quot; rel=&quot;preconnect&quot; /&gt;</code></li><li>请求优化 <ul><li>http2 多路复用 首部压缩 二进制分帧 等</li></ul></li><li>页面解析优化 <ul><li>ssr</li><li>预渲染 prerender-spa-plugin</li></ul></li><li>资源加载优化和页面渲染优化 <ul><li>减少资源大小 <ul><li>gzip</li><li>拆分后动态加载</li></ul></li><li>加快加载速度 <ul><li>cnd</li><li>http2</li></ul></li><li>预加载 <ul><li>prefetch 预请求</li><li>preload</li></ul></li></ul></li><li>接口合并</li></ol><h4 id="prefetch-preload" tabindex="-1"><a class="header-anchor" href="#prefetch-preload" aria-hidden="true">#</a> prefetch preload</h4><p>preload 告诉浏览器立即加载资源; prefetch 告诉浏览器在空闲时才开始加载资源； preload、prefetch 仅仅是加载资源，并不会“执行”; preload、prefetch 均能设置、命中缓存； 正确使用 preload、prefetch 不会导致重复请求；</p>`,30),i=[e];function p(o,c){return a(),s("div",null,i)}const r=n(l,[["render",p],["__file","topic-2-性能优化.html.vue"]]);export{r as default};

import{_ as i,o as a,c as e,e as l}from"./app-5e6e879c.js";const r={},h=l('<h2 id="web-safe" tabindex="-1"><a class="header-anchor" href="#web-safe" aria-hidden="true">#</a> web safe</h2><p>常见的 web 前端安全攻击方式：</p><ul><li>xss 跨站脚本攻击</li><li>csrf 跨站请求伪造</li><li>MITM 中间人攻击</li></ul><h2 id="xss" tabindex="-1"><a class="header-anchor" href="#xss" aria-hidden="true">#</a> XSS</h2><p>跨站脚本攻击: 在网页中插入恶意的js脚本， 当用户浏览时，就会触发脚本, 造成xss攻击</p><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><ul><li>反射型</li><li>存储型</li><li>DOM型</li></ul><h4 id="反射型" tabindex="-1"><a class="header-anchor" href="#反射型" aria-hidden="true">#</a> 反射型</h4><p>用户输入的注入代码 通过浏览器传入到服务器后，又被反射回来，在浏览器中解析执行</p><p>demo: 表单输入 <code>&lt;script src &gt;</code> 然后回来执行 电子邮件？ 聊天软件?</p><h4 id="存储型" tabindex="-1"><a class="header-anchor" href="#存储型" aria-hidden="true">#</a> 存储型</h4><p>用户输入的注入代码，通过传输，被永久春芳到了目标服务器的数据库或文件中，用户再次访问这个注入代码的页面就出现了</p><p>博客论坛留言板</p><h4 id="dom型" tabindex="-1"><a class="header-anchor" href="#dom型" aria-hidden="true">#</a> DOM型</h4><p>通过修改页面的dom结构</p><p>例子：</p><p>攻击者诱导被害者打开链接<code> hzfe.org?name=&lt;script src=&quot;http://a.com/attack.js&quot;/&gt;</code>。</p><p>被攻击网站前端取出 URL 的 name 字段后未经转义直接通过 innerHTML 渲染到页面中。</p><p>被害者在不知情的情况下，执行了攻击者注入的脚本。</p><h3 id="危害" tabindex="-1"><a class="header-anchor" href="#危害" aria-hidden="true">#</a> 危害</h3><ol><li>劫持用户cookie，通过在网页中写入并执行文件，劫持用户浏览器，将用户当前使用的sessionID信息发送至攻击者控制的网站或服务器</li><li>利用 iframe frame XHR Flash等，以用户的身份执行一些动作</li><li>利用植入flash 通过crossdomain权限设置进一步获取更改权限，或利用java等得到类似操作</li><li>挂马</li><li>蠕虫</li><li>有局限性的键盘记录</li></ol><h3 id="防范" tabindex="-1"><a class="header-anchor" href="#防范" aria-hidden="true">#</a> 防范</h3><ol><li>对外部的输入进行过滤编码和转译</li><li>设置 cookie httpOnly 属性, 禁止js读取cookie</li><li>开启CSP content security policy, 内容安全策略 ，规定浏览器只能执行特定来源的代码</li></ol><h2 id="csrf" tabindex="-1"><a class="header-anchor" href="#csrf" aria-hidden="true">#</a> csrf</h2><p>跨站请求伪造</p><p>攻击者盗用用户身份，以用户身份发送恶意请求</p><p>如：在第三方网站上直接放一个img， 就会盗用这个img链接相关的cookie从而发起请求</p><h3 id="防范-1" tabindex="-1"><a class="header-anchor" href="#防范-1" aria-hidden="true">#</a> 防范</h3><ol><li>csrf token 在用户请求时需要加入token， 进行身份验证 <ul><li>问题，大型网站添加seesion存储会增加服务器压力</li></ul></li><li>http header中添加自定义属性并验证</li><li>添加白名单，仅允许安全域名请求</li><li>增加验证码验证</li><li>cookie设置 SameSite 属性，</li></ol><h2 id="mitm" tabindex="-1"><a class="header-anchor" href="#mitm" aria-hidden="true">#</a> MITM</h2><p>中间人攻击</p><p>主要有两个阶段： 拦截和解密</p><h3 id="拦截" tabindex="-1"><a class="header-anchor" href="#拦截" aria-hidden="true">#</a> 拦截</h3><p>在用户数据未到达目标设备前拦截，分为主动和被动</p><ol><li>主动</li></ol><ul><li>APR欺骗:</li><li>DNS: 冒充域名服务器，将IP进行转发</li></ul><ol start="2"><li>被动: 免费的wifi热点</li></ol><h3 id="解密" tabindex="-1"><a class="header-anchor" href="#解密" aria-hidden="true">#</a> 解密</h3><p>ssl劫持伪造证书 -&gt; ssl剥离 将https降级为http转给用户使用</p><h3 id="防范-2" tabindex="-1"><a class="header-anchor" href="#防范-2" aria-hidden="true">#</a> 防范</h3><p>对开发者:</p><ul><li>支持https</li><li>开启 hsts (Http strict transport security) 策略，有个缺点是用户首次访问时因还未收到 HSTS 响应头而不受保护</li></ul><p>对用户：</p><ul><li>尽可能是用https</li><li>避免不知名不安全wifi</li><li>不忽略不安全的浏览器通知</li><li>公共网络下不进行涉及敏感信息交互</li><li>用可信的第三方CA厂商，不下载不明来源的证书</li></ul>',44),t=[h];function s(d,c){return a(),e("div",null,t)}const n=i(r,[["render",s],["__file","safe.html.vue"]]);export{n as default};

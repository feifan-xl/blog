import{_ as n,o as s,c as a,e}from"./app-5e6e879c.js";const t={},p=e(`<h2 id="_1-base-type-and-complex-type" tabindex="-1"><a class="header-anchor" href="#_1-base-type-and-complex-type" aria-hidden="true">#</a> 1. base type and complex type</h2><p>在 <code>js</code> 中,数据类型可分为两类:</p><ul><li>基本类型</li><li>复杂类型(引用类型)</li></ul><p>两者区别为存储位置不同</p><h3 id="base-type" tabindex="-1"><a class="header-anchor" href="#base-type" aria-hidden="true">#</a> base type</h3><p>主要有以下</p><ul><li>Number</li><li>String</li><li>Boolean</li><li>undefined</li><li>null</li><li>symbol</li><li>bigint</li></ul><h3 id="complex-type" tabindex="-1"><a class="header-anchor" href="#complex-type" aria-hidden="true">#</a> complex type</h3><p>又称 <code>引用类型</code>, 本质都是 <code>Object</code></p><ul><li>Object</li><li>Array</li><li>Function</li><li>Date</li><li>Math</li><li>Map</li><li>...</li></ul><h4 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h4><h4 id="arraylike" tabindex="-1"><a class="header-anchor" href="#arraylike" aria-hidden="true">#</a> ArrayLike</h4><p>类数组对象，就是指可以通过索引属性访问元素并且拥有 length 属性的对象<br> 常见的 arguments对象, DOM NodeList对象...</p><p>类数组无法使用 forEach、splice、push 等数组原型链上的方法</p><p>类数组转换为数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLikeObj<span class="token punctuation">)</span>
  <span class="token function">Array</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arrayLikeObj<span class="token punctuation">)</span>
  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arrayLikeObj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="different-between-base-and-complex" tabindex="-1"><a class="header-anchor" href="#different-between-base-and-complex" aria-hidden="true">#</a> different between base and complex</h3><ol><li>声明变量时不同的内存地址分配：</li></ol><ul><li>简单类型的值存放在栈中，在栈中存放的是对应的值</li><li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li></ul><ol start="2"><li>不同的类型数据导致赋值变量时的不同：</li></ol><ul><li>简单类型赋值，是生成相同的值，两个对象对应不同的地址</li><li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象</li></ul><h2 id="_2-type-conversion" tabindex="-1"><a class="header-anchor" href="#_2-type-conversion" aria-hidden="true">#</a> 2.type conversion</h2><p>常见的类型转换:</p><ul><li>强制转换(显示转换)</li><li>自动转换(隐式转换)</li></ul><h3 id="display-conversion" tabindex="-1"><a class="header-anchor" href="#display-conversion" aria-hidden="true">#</a> display conversion</h3><p>即使用了相应类型转换功能的API, 常见的:</p><ul><li>Number()</li><li>parseInt()</li><li>String()</li><li>Boolean()</li></ul><h4 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">324</span><span class="token punctuation">)</span> <span class="token comment">// 324</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;324&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 324</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;324abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>
<span class="token comment">// Symbol -&gt; Throw a TypeError</span>
<span class="token comment">// Object -&gt; 先调用toPrimitive, 再调用toNumber</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面可以看到，<code>Number</code>转换的时候是很严格的，只要有一个字符无法转成数值，整个字符串就会被转为<code>NaN</code></p><h4 id="parseint" tabindex="-1"><a class="header-anchor" href="#parseint" aria-hidden="true">#</a> parseInt()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;32a3&#39;</span><span class="token punctuation">)</span> <span class="token comment">//32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[object Object]&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1,2,3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="implicit-conversion" tabindex="-1"><a class="header-anchor" href="#implicit-conversion" aria-hidden="true">#</a> implicit conversion</h3><p>归纳为两种情况发生隐式转换的场景：</p><ul><li>比较运算（<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>）、<code>if</code>、<code>while</code>需要布尔值地方</li><li>算术运算（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>）</li></ul><h4 id="auto-conversion-to-boolean" tabindex="-1"><a class="header-anchor" href="#auto-conversion-to-boolean" aria-hidden="true">#</a> auto conversion to boolean</h4><ul><li>undefined</li><li>null</li><li>false</li><li>+0</li><li>-0</li><li>NaN</li><li>&quot;&quot;</li></ul><p>除了上面几种会被转化成<code>false</code>，其他都换被转化成<code>true</code></p><h4 id="auto-conversion-to-string" tabindex="-1"><a class="header-anchor" href="#auto-conversion-to-string" aria-hidden="true">#</a> auto conversion to string</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// &#39;51&#39;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token boolean">true</span> <span class="token comment">// &quot;5true&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token boolean">false</span> <span class="token comment">// &quot;5false&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// &quot;5[object Object]&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// &quot;5&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// &quot;5function (){}&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token keyword">undefined</span> <span class="token comment">// &quot;5undefined&quot;</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">+</span> <span class="token keyword">null</span> <span class="token comment">// &quot;5null&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="auto-conversion-to-number" tabindex="-1"><a class="header-anchor" href="#auto-conversion-to-number" aria-hidden="true">#</a> auto conversion to number</h4><p>除了<code>+</code>有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;5&#39;</span> <span class="token operator">-</span> <span class="token string">&#39;2&#39;</span> <span class="token comment">// 3</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">*</span> <span class="token string">&#39;2&#39;</span> <span class="token comment">// 10</span>
<span class="token boolean">true</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment">// 0</span>
<span class="token boolean">false</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// -1</span>
<span class="token string">&#39;1&#39;</span> <span class="token operator">-</span> <span class="token number">1</span>   <span class="token comment">// 0</span>
<span class="token string">&#39;5&#39;</span> <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">// 0</span>
<span class="token boolean">false</span> <span class="token operator">/</span> <span class="token string">&#39;5&#39;</span> <span class="token comment">// 0</span>
<span class="token string">&#39;abc&#39;</span> <span class="token operator">-</span> <span class="token number">1</span>   <span class="token comment">// NaN</span>
<span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 1</span>
<span class="token keyword">undefined</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>null</code>转为数值时，值为<code>0</code> 。<code>undefined</code>转为数值时，值为<code>NaN</code></p><h3 id="valueof-tostring" tabindex="-1"><a class="header-anchor" href="#valueof-tostring" aria-hidden="true">#</a> valueof &amp; toString</h3><p>toString: 返回反映这个对象的字符串 如: <code>&#39;[object Array]&#39;</code></p><p>valueOf: 返回它相应的原始值</p><ul><li><p>如果 已经是原始类型， 就不需要转换</p></li><li><p>先调用 valueof 如果返回结果不是 string 再调用toString</p></li><li><p>如果都没有返回原始类型， 就会报错</p></li><li><p>在进行对象运算时，将优先调用 toString 方法，如若没有重写 toString 方法，则会调用 valueOf 方法；如果两个方法都没有重写，则会调用 Object 上面的 toString</p></li><li><p>当进行强制类型转换时，如果转换成字符串则会调用 toString ，转换成数字则会调用 valueOf</p></li><li><p>使用运算符进行运算时，valueOf 的优先级高于 toString</p></li></ul><p>#面试题分析</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
a<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span>
a <span class="token operator">==</span> <span class="token number">1</span> <span class="token comment">// true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="traverse" tabindex="-1"><a class="header-anchor" href="#traverse" aria-hidden="true">#</a> traverse</h3><h4 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> object</h4><p><em>遍历属性</em></p><ol><li>常用的遍历方式, - <code>for...in</code> 遍历属性 会变量对象的整个原型链 - <code>Object.keys</code> 自身可遍历对象的值的集合 - <code>Object.entries</code> 遍历自身可枚举属性的键值对</li><li>遍历所有， 包括不可枚举属性<br> - <code>Object.getOwnPropertyNames(obj)</code> <code>getOwnPropertySymbols</code><br> - <code>Object.getOwnPropertyDescriptors()</code><br> - <code>Reflect.ownKeys(obj)</code></li></ol><p><em>遍历值</em></p><ul><li><code>Object.values</code></li><li><code>Object.entries</code></li></ul><h4 id="array-1" tabindex="-1"><a class="header-anchor" href="#array-1" aria-hidden="true">#</a> array</h4><ol><li>forEach, map ...</li><li><code>for...in</code></li><li><code>for...of</code> 不仅支持数组,还支持类数组,也支持字符串遍历</li></ol><h2 id="_3-check-type" tabindex="-1"><a class="header-anchor" href="#_3-check-type" aria-hidden="true">#</a> 3.check type</h2><p>通常的检查方法:</p><ol><li>typeof 可分辨基本数据类型(null 除外)， 引用类型都为 <code>object</code></li><li>instanceof 可以判断对象的类型, 内部运行机制是判断在其原型链中能否找到该类型的原型<br> 只能正确判断引用数据类型 不能判断基本数据类型</li><li>constructor 实例对象的 constructor 属性 指向他的构造函数</li><li>Object.prototype.toString.call* 使用 Object 对象的原型方法 toString 来判断数据类型</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &#39;[object Array]&#39;</span>
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;[object String]&#39;</span>
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// &#39;[object Number]&#39;</span>
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// &#39;[object Object]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object.prototype.toString.call(xx) 实现原理</p><ul><li>若参数(xx)不为 null 或 undefined，则将参数转为对象，再作判断</li><li>转为对象后，取得该对象的 [Symbol.toStringTag] 属性值（可能会遍历原型链）作为 tag，然后返回 &quot;[object &quot; + tag + &quot;]&quot; 形式的字符串。</li></ul><h3 id="problem" tabindex="-1"><a class="header-anchor" href="#problem" aria-hidden="true">#</a> problem</h3><ol><li>数组的检查</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>判断是否是NaN</li></ol><ul><li>isNaN(NaN)</li><li>NaN !== NaN</li></ul><ol start="3"><li>isNaN 与 Number.isNaN 的区别</li></ol><ul><li>函数 isNaN 接收参数后, 会尝试将参数转换为数值, 不能被转换为数值的值都会返回 true</li><li>Number.isNaN 会先判断参数是否是数字, 不会进行数据类型的转换 判断 NaN 更为准确</li></ul><ol start="4"><li>== 操作符的强制类型转换 判断流程:</li></ol><ul><li>判断数据类型是否相同, 不同的化 强制类型转换</li><li>是否在对比 null undefined</li><li>判断两个是否为 string number 是的话转换为 number</li><li>判断是否一方为 boolean</li><li>一方是object 另一方是 string number symbol, 会把object 转换为 原始类型</li></ul><ol start="5"><li><p>js 中的 包装类型 基本类型是没有属性和方法的 , 但是为了便于操作, 调用基本类型的属性或方法时 会隐私的转换为对象</p></li><li><p>Object.is</p></li></ol><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>Object.is(NaN, NaN) // true
Object.is(NaN, 0/0) // true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-copy" tabindex="-1"><a class="header-anchor" href="#_4-copy" aria-hidden="true">#</a> 4.copy</h2><h3 id="shallow-clone" tabindex="-1"><a class="header-anchor" href="#shallow-clone" aria-hidden="true">#</a> shallow clone</h3><ol><li><code>Object.assign(target, source)</code></li><li>针对数组 <ul><li><code>Array.prototype.slice</code></li><li><code>Array.prototype.concat</code></li></ul></li><li>扩展运算符 <ul><li><code>{ ...obj }</code></li><li><code>[ ...arr ]</code></li></ul></li><li><code>for ... in</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">shallowClone</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newObj
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deep-clone" tabindex="-1"><a class="header-anchor" href="#deep-clone" aria-hidden="true">#</a> deep clone</h3><h4 id="json-stringify" tabindex="-1"><a class="header-anchor" href="#json-stringify" aria-hidden="true">#</a> JSON.stringify()</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj2<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是这种方式存在弊端，会忽略<code>undefined</code>、<code>symbol</code>和<code>函数</code></p><h4 id="traverse-recursion" tabindex="-1"><a class="header-anchor" href="#traverse-recursion" aria-hidden="true">#</a> traverse recursion</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">deepClone</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
    <span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    hash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newObj<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>newObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newObj
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-function-object" tabindex="-1"><a class="header-anchor" href="#_5-function-object" aria-hidden="true">#</a> 5. function object</h2><p>function 也是一种对象，有对象的部分特点:</p><ul><li>name</li><li>length 返回函数入参的个数</li><li>可以增加自定义属性</li></ul><h3 id="new-function" tabindex="-1"><a class="header-anchor" href="#new-function" aria-hidden="true">#</a> new Function</h3><ul><li><p>使用场景: 根据重网络或其他地方获取的字符串,动态创建函数</p></li><li><p>使用限制: 只能访问全局变量,无法访问<code>outer function</code>中的变量</p></li><li><p>语法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a, b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,94),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","data-type.html.vue"]]);export{r as default};

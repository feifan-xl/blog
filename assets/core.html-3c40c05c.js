import{_ as e,o as a,c as i,e as r}from"./app-5e6e879c.js";const t={},d=r('<h3 id="异步更新" tabindex="-1"><a class="header-anchor" href="#异步更新" aria-hidden="true">#</a> 异步更新</h3><p>优化， 同一个watcher 被多次触发， 在推入队列时 会进行优化， 尽保留最后一次</p><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><ol><li>create vue3被 setup 取代</li><li>mounted</li><li>update</li><li>destory</li></ol><h3 id="pinia" tabindex="-1"><a class="header-anchor" href="#pinia" aria-hidden="true">#</a> pinia</h3><p>全新状态管理库:</p><ul><li>移除mutations,</li><li>只有 store 概念， 并支持多个store</li></ul><h3 id="v-if-v-for" tabindex="-1"><a class="header-anchor" href="#v-if-v-for" aria-hidden="true">#</a> v-if v-for</h3><p>优先级</p><ul><li>vue3 v-if 大于 v-for</li><li>vue2 v-if 小于 v-for 先遍历后判断</li></ul><h3 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick" aria-hidden="true">#</a> nextTick</h3><p>Promise.resolve &gt; MutationObserver &gt; setImmediate &gt; setTimeout</p><h3 id="vnode" tabindex="-1"><a class="header-anchor" href="#vnode" aria-hidden="true">#</a> Vnode</h3><p>是一层对真实node的抽象, 使用js对象来描述dom</p>',14),o=[d];function n(h,l){return a(),i("div",null,o)}const c=e(t,[["render",n],["__file","core.html.vue"]]);export{c as default};

import{_ as i,o as l,c as e,e as a}from"./app-5e6e879c.js";const t={},o=a('<h2 id="jsbridge" tabindex="-1"><a class="header-anchor" href="#jsbridge" aria-hidden="true">#</a> jsbridge</h2><p>JSBridge是JS和Native之间的一种通信方式，也就是定义Native和JS的通信。其中Native只通过一个固定的桥对象调用JS，而JS也只通过固定的桥对象调用Native。</p><p>双向的通道:</p><ul><li>JS 向 Native 发送消息: 调用相关功能、通知 Native 当前 JS 的相关状态等。</li><li>Native 向 JS 发送消息: 回溯调用结果、消息推送、通知 JS 当前 Native 的状态等。</li></ul><p>具体实现:</p><p><em>js调用native</em></p><ol><li>全局注入API JS直接调用</li><li>拦截约定好的url scheme,进行通信</li></ol><p><em>native调用js</em></p><ol><li>执行拼接js字符串,相当于外部调用js方法</li></ol><h2 id="小程序" tabindex="-1"><a class="header-anchor" href="#小程序" aria-hidden="true">#</a> 小程序</h2><h3 id="双线程架构" tabindex="-1"><a class="header-anchor" href="#双线程架构" aria-hidden="true">#</a> 双线程架构</h3><p>逻辑层和视图层分开， 通过wxjsbriage进行通信</p><p>好处:</p><ol><li>安全， 沙箱隔离， 无dom bom</li></ol><ul><li>不允许跳转</li><li>不允许操作dom</li><li>不允许随意使用window上未知的api</li></ul><ol start="2"><li>性能</li></ol><ul><li>双线程并行，初始化快</li><li>不会阻塞</li></ul><ol start="3"><li>提供原生渲染能力和原生api能力</li></ol><p>为什么快</p><ol><li>双线程 不阻塞</li><li>多个webview 页面切换流畅</li><li>webvie 预加载</li><li>安装包缓存</li></ol><p>性能问题：</p><ol><li>频繁的调用setData() 双线程卡顿 更新不及时</li><li>庞大的数据量去调用setData() 传输的数据转为字符串形式传递，在去执行</li><li>页面繁多的dom结构 页面更新不及时 卡顿</li></ol>',22),r=[o];function s(d,n){return l(),e("div",null,r)}const h=i(t,[["render",s],["__file","小程序.html.vue"]]);export{h as default};

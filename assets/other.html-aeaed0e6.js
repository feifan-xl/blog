import{_ as n,o as a,c as e,e as s}from"./app-5e6e879c.js";const o={},t=s(`<h3 id="关于算法复杂度" tabindex="-1"><a class="header-anchor" href="#关于算法复杂度" aria-hidden="true">#</a> 关于算法复杂度</h3><ol><li>只要高阶项,不要低阶项,也不要高阶的系数, 如 <code>T(n) = O(2n² + 2n + 3)</code>, 时间复杂度即为<code>O(n²)</code></li></ol><p>O(logn) 复杂度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cnt <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>x = log2n, 也就是 logn</p><h3 id="增长率" tabindex="-1"><a class="header-anchor" href="#增长率" aria-hidden="true">#</a> 增长率</h3><p>O(1) 常量 O(log n) 对数 O(n) 线性 O(nlogn) 对数-线性 O(n²) 二次 O(2^n) 指数</p><h3 id="常见的算法复杂度" tabindex="-1"><a class="header-anchor" href="#常见的算法复杂度" aria-hidden="true">#</a> 常见的算法复杂度</h3><p><em>logN</em></p><ol><li>二分法</li><li>欧几里得算法</li></ol><p>2^n</p><ol><li>斐波那契</li></ol><blockquote><p>https://blog.csdn.net/qq_34358193/article/details/106469137</p></blockquote>`,13),l=[t];function c(i,p){return a(),e("div",null,l)}const d=n(o,[["render",c],["__file","other.html.vue"]]);export{d as default};

import{_ as l,o as i,c as e,e as p}from"./app-5e6e879c.js";const r={},t=p('<h3 id="ts" tabindex="-1"><a class="header-anchor" href="#ts" aria-hidden="true">#</a> ts</h3><p>js的超集, 它添加了静态类型系统和一些其他的语言特性 如:类型 接口 面向对象</p><p>主要特点：</p><ol><li>跨平台</li><li>新的es特性</li><li>oop</li><li>静态类型检查</li></ol><h3 id="相关面试题" tabindex="-1"><a class="header-anchor" href="#相关面试题" aria-hidden="true">#</a> 相关面试题</h3><ul><li><p>TypeScript 的主要优点是什么？ 类型安全 类型检查 一些面向对象等高级功能</p></li><li><p>TypeScript 中控制成员可见性有哪些方法？</p></li></ul><p>在 TypeScript 中，可以通过访问修饰符（public, private, protected, internal）来控制成员（类、接口、函数、变量等）的可见性。</p><ul><li><p>TypeScript 支持静态类吗？ TypeScript 支持静态类，因为静态类是 TypeScript 为了更好地描述业务逻辑而引入的一个概念，它在编译为 JavaScript 代码后不会产生任何运行时开销，因此非常适合用来组织和管理代码。</p></li><li><p>什么是枚举，在 TypeScript 中是如何工作的？</p></li></ul><p>枚举是一种特殊的类型，是一组具名的常量值，</p><ul><li><p>你能解释一下 TypeScript 中的原始类型吗？比如什么是 any 类型，什么时候使用</p></li><li><p>什么是 void 类型，什么时候使用 void 类型？ 一个特殊类型，表示没有返回值</p></li></ul><ol><li><p>命名空间和模块 命名空间是为了解决重名问题 区别: - 全局命名空间下带有普通名字的js对象 - 模块除了包含代码和声明， 还可以声明它的依赖 - 命名空间开发不建议用， 一般都是库 主要作用是给编译器编写代码的时候参考使用</p></li><li><p>decorator: 特殊的类型声明，可以注入到类 方法 属性参数上 来扩展功能</p></li><li><p>never void unknown any</p><ul><li>never 永远存在的值 error</li><li>void 无任何类型， 可被赋值为 undefined null</li><li>unknown 表示不确定性</li><li>any 任何</li></ul></li><li><p>泛型 高级类型, 为了创建可复用的组件</p></li><li><p>interface type</p><ul><li>相同 都可以描述一个对象或函数, 允许扩展(extend)</li></ul><ol><li>type 可以声明基本类型，联合类型，元组</li><li>type 可以使用 typeof 获取实例的类型进行赋值</li><li>多个相同的 interface 声明可以自动合并</li></ol></li><li><p>模块加载机制</p><ul><li>先导入模块</li><li>解析失败 尝试定位 外部模块声明 (.d.ts)</li></ul></li><li><p>declare, declare global</p><ul><li>declare 是用来定义全局变量、全局函数、全局命名空间、js modules、class等</li><li>declare global 为全局对象 window 增加新的属性</li></ul></li></ol>',11),a=[t];function o(c,n){return i(),e("div",null,a)}const s=l(r,[["render",o],["__file","core.html.vue"]]);export{s as default};

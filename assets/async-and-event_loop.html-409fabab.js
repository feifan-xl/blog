import{_ as n,o as s,c as a,e}from"./app-5e6e879c.js";const t={},p=e(`<h2 id="process-and-thread" tabindex="-1"><a class="header-anchor" href="#process-and-thread" aria-hidden="true">#</a> process and thread</h2><h3 id="difference" tabindex="-1"><a class="header-anchor" href="#difference" aria-hidden="true">#</a> difference</h3><ol><li>根本区别:</li></ol><ul><li>进程是操作系统资源分配的基本单位</li><li>线程是处理器任务调度和执行的基本单位</li></ul><ol start="2"><li>资源开销</li></ol><ul><li>进程有独立的代码和数据空间，程序间切换开销大</li><li>线程是轻量级进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小</li></ul><ol start="3"><li>包含关系 一个进程可以包含多个先线程</li><li>内存分配 同一进程的线程共享本进程的地址空间和资源， 进程间的地址空间和资源相互独立</li><li>相互影响 一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮</li></ol><p><code>小结</code></p><ul><li>进程: cpu资源分配最小单位 (能拥有资源和独立运行的最小单位)</li><li>线程: cpu 调度的最小单位 (是建立在进程基础上的一次程序运行单位，一个进程可以有多个线程)</li></ul><h3 id="about-browser" tabindex="-1"><a class="header-anchor" href="#about-browser" aria-hidden="true">#</a> about browser</h3><p><code>js engine</code> 单线程架构<br><code>browser</code> 多线程架构</p><p>chrome架构(简略):</p><ul><li>GUI线程 <ul><li>负责渲染浏览器界面</li><li>当界面需要重绘</li><li>与JS线程互斥</li></ul></li><li>JS引擎线程 <ul><li>通过js</li><li>与 GUI 进程互斥</li></ul></li><li>事件触发线程 <ul><li>控制事件循环</li><li>如setTimeOut时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件线程中</li></ul></li><li>定时器触发线程 <ul><li>setTimeout 计数</li><li>setInterval 计数</li></ul></li><li>异步http请求线程 <ul><li>XMLHttpRequest</li></ul></li></ul><h2 id="event-loop" tabindex="-1"><a class="header-anchor" href="#event-loop" aria-hidden="true">#</a> event loop</h2><h3 id="browser" tabindex="-1"><a class="header-anchor" href="#browser" aria-hidden="true">#</a> browser</h3><p><code>micro 微任务</code> 一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前<br> 常见的有:</p><ul><li>Promise.then</li><li>MutaionObserver</li><li>Object.observe（已废弃；Proxy 对象替代）</li><li>process.nextTick（Node.js）</li><li>async/await</li></ul><p><code>macro 宏任务</code> 时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合<br> 常见的有:</p><ul><li>script (可以理解为外层同步代码)</li><li>setTimeout/setInterval</li><li>UI rendering/UI事件</li><li>postMessage、MessageChannel</li><li>setImmediate、I/O（Node.js）</li></ul><p>流程:</p><ol><li>js引擎将所有代码放入执行栈，并依次弹出并执行，这些任务有的是同步有的是异步(宏任务或微任务)</li><li>如果在执行栈中代码时发现宏任务则交给浏览器相应的线程去处理，浏览器线程在正确的时机(比如定时器最短延迟时间)将宏任务的消息(或称之为回调函数)推入宏任务队列。</li><li>微任务同理</li><li>当执行栈为空时，eventLoop转到微任务队列处，依次弹出每个任务放入执行栈并执行，如果在执行的过程中又有微任务产生则推入队列末尾，这样循环直到微任务队列为空。</li><li>当执行栈和微任务队列都为空时，eventLoop转到宏任务队列，并取出队首的任务放入执行栈执行。需要注意的是宏任务每次循环只执行一个。</li><li>重复1-5 直到栈和队列都为空时，代码执行结束</li></ol><h3 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> node</h3><p>NodeJS中执行宏队列的回调任务有6个阶段，按如下方式依次执行：</p><ol><li>timers阶段：这个阶段执行setTimeout和setInterval预定的callback</li><li>I/O callback阶段：执行除了close事件的callbacks、被timers设定的callbacks、setImmediate()设定的callbacks这些之外的callbacks</li><li>idle, prepare阶段：仅node内部使用</li><li>poll阶段：获取新的I/O事件，适当的条件下node将阻塞在这里</li><li>check阶段：执行setImmediate()设定的callbacks</li><li>close callbacks阶段：执行socket.on(&#39;close&#39;, ....)这些callbacks</li></ol><p>其中宏队列有4个，各种类型的任务主要集中在以下四个队列之中：</p><ul><li>Timers Queue</li><li>IO Callbacks Queue</li><li>Check Queue</li><li>Close Callbacks Queue 微队列主要有2个，不同的微任务放在不同的微队列中：</li><li>Next Tick Queue：是放置process.nextTick(callback)的回调任务的</li><li>Other Micro Queue：放置其他microtask，比如Promise等</li></ul><p>流程:</p><ol><li>执行全局Script的同步代码</li><li>执行microtask微任务，先执行所有Next Tick Queue中的所有任务，再执行Other Microtask Queue中的所有任务</li><li>执行macrotask宏任务，也就是6个阶段, 每个阶段都会</li></ol><ul><li>清空 nextTicket queue</li><li>清空 microtask queue</li></ul><ol start="4"><li>重复 2-3</li></ol><p>小结:</p><ul><li>timers queue</li><li>清空 nextTicket queue / microtask queue</li><li>I/O queue</li><li>清空</li><li>check queue</li><li>清空</li><li>close callback</li><li>清空</li><li>...</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token comment">// callback1</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// callback2</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// callback3</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// callback4</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// callback5</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// callback6</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token comment">// callback7              </span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// callback8</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// callback9</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案：0, 10, 9, 1, 4, 7, 8, 5, 6, 3, 2</p><p>注意:</p><ol><li><code>Process.nextTick()</code>虽然是异步API, 但是技术上, 不是事件循环的一部分</li><li>setTimeout(0) 与 setImmediate 随机</li></ol><h3 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> summary</h3><ol><li><p>事件循环是 浏览器 和 Node 执行JS代码的核心机制，但浏览器 和 NodeJS事件循环的实现机制有些不同</p></li><li><p>浏览器事件循环有一个宏队列，一个微队列，且微队列在一次循环中队列中的任务一个接一个执行一直到队列为空，而宏队列只取队首的一个任务放入执行栈执行，执行过后接着执行微队列，并构成循环</p></li><li><p>NodeJS事件循环有四个宏队列，两个微队列，微队列执行方式和浏览器的类似，先执行Next Tick Queue所有任务，再执行Other Microtask Queue所有任务。 但宏队列执行时会依次执行队列中的每个任务直至队为空才开始再次执行微队列任务</p></li><li><p>MacroTask包括： setTimeout、setInterval、 setImmediate(Node)、requestAnimation(浏览器)、IO、UI rendering</p></li><li><p>Microtask包括： process.nextTick(Node)、Promise、Object.observe、MutationObserver</p></li></ol><h2 id="async-operation" tabindex="-1"><a class="header-anchor" href="#async-operation" aria-hidden="true">#</a> async operation</h2><ol><li>promise</li><li>async await</li><li>genrator</li><li>MutationObserver</li><li>setTimeout setInterval setImmediate</li><li>process.nextTick(Node)</li><li>Object.observe (已废弃)</li><li>script attribute: async/defer</li><li>web worker</li><li>MessageChannel</li><li>posetMessage</li></ol><h3 id="mutationobserver" tabindex="-1"><a class="header-anchor" href="#mutationobserver" aria-hidden="true">#</a> MutationObserver</h3><p><code>MutationObserver</code> 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分</p><h3 id="object-observe" tabindex="-1"><a class="header-anchor" href="#object-observe" aria-hidden="true">#</a> Object.observe</h3><p>异步地观察一个对象的变化 已废弃</p><h3 id="script-attribute-async-defer" tabindex="-1"><a class="header-anchor" href="#script-attribute-async-defer" aria-hidden="true">#</a> script attribute: async/defer</h3><p><code>&lt;script type=&quot;module&quot; async /&gt;</code></p><ul><li>type： <ul><li>空 默认 普通js</li><li>module 视为js模块， 代码内容延后处理(defer不生效)</li></ul></li><li>defer: 立即下载，延迟执行 <code>DOMContentLoaded</code> 事件前执行</li><li>async: 异步并行请求，并尽快解析和执行 并不保证按照先后顺序执行</li></ul><h3 id="web-worker" tabindex="-1"><a class="header-anchor" href="#web-worker" aria-hidden="true">#</a> web worker</h3><p>指的是一种可由脚本创建的后台任务，任务执行中可以向其创建者收发信息</p><p>Web Worker 为 JavaScript 创造了多线程环境，允许主线程创建 Worker 线程，将一些任务分配给 Worker 线程运行，处理完后可以通过 postMessage 将结果传递给主线程。优点在于可以在一个单独的线程中执行费时的处理任务，从而允许主线程中的任务（通常是 UI）运行不被阻塞/放慢。</p><p>使用 Web Worker 时有以下三点需要注意的地方：</p><p>在 Worker 内部无法访问主线程的任何资源，包括全局变量，页面的 DOM 或者其他资源，因为这是一个完全独立的线程。<br> Worker 和主线程间的数据传递通过消息机制进行。使用 postMessage 方法发送消息；使用 onmessage 事件处理函数来响应消息。 Worker 可以创建新的 Worker，新的 Worker 和父页面同源。Worker 在使用 XMLHttpRequest 进行网络 I/O 时，XMLHttpRequest 的 responseXML 和 channel 属性会返回 null。<br> Web Worker 主要应用场景：</p><p>处理密集型数学计算 大数据集排序 数据处理（压缩，音频分析，图像处理等） 高流量网络通信 参考资料</p><h3 id="messagechannel" tabindex="-1"><a class="header-anchor" href="#messagechannel" aria-hidden="true">#</a> MessageChannel</h3><p>Channel Messaging API 的 <code>MessageChannel</code> 接口允许我们创建一个新的消息通道，并通过它的两个 <code>MessagePort</code> 属性发送数据。</p><p>DEMO: iframe传值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">var</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> para <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> ifr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;iframe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> otherWindow <span class="token operator">=</span> ifr<span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>

  ifr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> iframeLoaded<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">iframeLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    otherWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from the main page!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>channel<span class="token punctuation">.</span>port2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> handleMessage<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    para<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="postmessage" tabindex="-1"><a class="header-anchor" href="#postmessage" aria-hidden="true">#</a> postMessage</h3><p>一个窗口可以获得对另一个窗口的引用（比如 targetWindow = window.opener），然后在窗口上调用 <code>targetWindow.postMessage() </code>方法分发一个 MessageEvent 消息</p>`,59),o=[p];function l(i,c){return s(),a("div",null,o)}const r=n(t,[["render",l],["__file","async-and-event_loop.html.vue"]]);export{r as default};

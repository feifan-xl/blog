import{_ as i,o as l,c as e,e as t}from"./app-5e6e879c.js";const a={},r=t('<h3 id="_3-x的设计目标" tabindex="-1"><a class="header-anchor" href="#_3-x的设计目标" aria-hidden="true">#</a> 3.x的设计目标</h3><ul><li>新特性 <ul><li>更快 <ul><li>响应式系统提升</li><li>编译优化</li></ul></li><li>更小 <ul><li>结构重构 支持tree-shaking</li></ul></li><li>更易于维护 <ul><li>ts</li><li>monorepo</li></ul></li><li>新功能 <ul><li>composition API</li><li>fragment teleport suspense</li></ul></li></ul></li><li>响应式 系统 <ul><li>proxy 重写</li><li>可以监听动态新增的属性</li><li>可以监听删除的属性</li><li>可以监听数组索引和length</li><li>性能提升 不需要递归遍历</li></ul></li><li>编译优化 <ul><li>静态提升 静态节点会被提升到 render 外</li><li>slot 编译优化， 非动态 slot 属性的更新 只会触发子组件更新 <ul><li>2.0 中父组件更新 slot会强制update</li><li>3.0 优化了 slot 的生成， 使得非动态slot中属性的更新只会触发子组件的更新</li></ul></li><li>diff 优化 添加 patchFlag 标识， 渲染时直接复用 不需要diff <ul><li>2.0 深度优先 同级比较 双端比较</li><li>3.0 对于不参与更新的元素，做静态标记并提示，只会被创建一次，在渲染时直接复用，不会进行diff</li></ul></li><li>事件缓存 <ul><li>2.0 针对节点绑定的事件 每次触发都要重新生成新的function去更新</li><li>3.0 中 提供了事件缓存对象 cacheHandlers 开启后，编译时回自动生成函数事件</li></ul></li></ul></li><li>fragmen <ul><li>vue2 基于snabbdom， 为了提高diff 效率， 每个组件是一个vnode， 只有一个节点</li><li>vue3 重写vdom， 每个组件对应的vnode数量就不那么重要了</li></ul></li></ul><h3 id="composition-api" tabindex="-1"><a class="header-anchor" href="#composition-api" aria-hidden="true">#</a> composition API</h3><p><strong>动机和目的</strong></p><ul><li>更好的逻辑复用和代码组织</li><li>更好的类型推导 (this 取消)</li></ul><p><strong>mixin的弊端</strong></p><ul><li>渲染上下文中暴露的 property 来源不清晰， 很难看出某个 property 是从哪个 mixin 中注入的</li><li>命名空间冲突. mixin之间的 property 和方法可能有冲突,同时高阶组件也可能和预期的prop有命名冲突</li><li>性能上, 高阶组件和无渲染组件需要额外的有状态的组件实例, 从而使得性能有所损耗</li></ul><p><strong>composition API</strong></p><ul><li>暴露给模板的property来源清晰,因为他们都是被组合逻辑函数返回的值</li><li>不存在命名空间冲突,可以通过解构任意命名</li><li>不在需要仅为逻辑复用而创建组件实例</li></ul><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h3><ul><li>composition API</li><li>fragments <ul><li>vue2 基于 snabbdom ， 每个组件实例对应一个vnode</li><li>vue3 重写了vdom 机制， 每个组件对应的vnode数量就不那么重要</li></ul></li><li>代码结构调整 更利于tree shaking</li><li>编译优化 <ul><li>静态提升 静态节点会被提升到 render 外 只会渲染一次</li><li>patch flag 静态节点 在diff时不做比较</li><li>缓存事件监听 开启cacheHandlers 动态事件绑定会被试做 静态标记</li></ul></li></ul><h3 id="编译优化" tabindex="-1"><a class="header-anchor" href="#编译优化" aria-hidden="true">#</a> 编译优化</h3><ol><li>生成 block tree</li></ol><ul><li>vue 组件越大 渲染越慢， 对一些静态节点 无数据更新 也会遍历</li><li>3.0 通过 静态编译阶段 对静态代码模板 分析，生成 block tree(将模板基于动态节点切割的区域)， 个 区块内部的节点结构是固定的，每个区块只需要追踪自身包含的动态节点</li></ul><ol start="2"><li>slot 编译优化</li></ol><ul><li>2.0 中父组件更新 slot会强制update</li><li>3.0 优化了 slot 的生成， 使得非动态slot中属性的更新只会触发子组件的更新</li></ul><ol start="3"><li>diff 算法优化 增加了静态标记 patchFlag</li></ol><ul><li>2.0 深度优先 同级比较 双端比较</li><li>3.0 对于不参与更新的元素，做静态标记并提示，只会被创建一次，在渲染时直接复用，不会进行diff</li></ul><h3 id="composition-api-1" tabindex="-1"><a class="header-anchor" href="#composition-api-1" aria-hidden="true">#</a> composition API</h3><ol><li><p>react hook 底层基于链表实现，每次组件 render的时候 都会顺序执行所有 hooks</p></li><li><p>vue 中只会在 注册时 调用一次</p></li></ol><ul><li>因为 vue 是基于数据响应式的 只要任何一个更改data的地方，相关的function或者template都会被重新计算，因此避开了react可能遇到的性能上的问题</li></ul><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> list</h3><ol><li>fragment</li></ol><ul><li>vue2 一个组件只有一个vdom，只有一个根</li><li>vue3 可以有多个根节点</li></ul><ol start="2"><li>teleport(Portal)</li><li>suspense</li></ol><h3 id="composition-api-原理" tabindex="-1"><a class="header-anchor" href="#composition-api-原理" aria-hidden="true">#</a> composition API 原理</h3><p>ref 其实是reactive的再次封装, 主要用来给基本类型使用 在内部生成对应的响应式对象,该内部值挂载到ref对象的value属性上</p><h3 id="watch-watcheffect" tabindex="-1"><a class="header-anchor" href="#watch-watcheffect" aria-hidden="true">#</a> watch watchEffect</h3><ul><li>watchEffect 立即运行, 被动的追踪它的依赖,当这些依赖改变时重新执行该函数</li><li>watch 是侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数</li></ul><blockquote><p>https://juejin.cn/post/7139921537896808479#heading-5</p></blockquote><h3 id="vue-2-7" tabindex="-1"><a class="header-anchor" href="#vue-2-7" aria-hidden="true">#</a> vue 2.7</h3><p>compsition API script setup css v-bind 对ts的支持(2.7使用ts重写的)</p><p>差异: 基于setter/getter 实现的响应式, 所有数组仍有问题 reactive()、ref() 和 shallowReactive() 会直接转换原始的对象而不是创建代理。 避免将数组作为 reactive() 的根值。因为无法访问属性，数组的变更不会被追踪到 (这样做会产生一则警告)。</p><h3 id="vue3-x" tabindex="-1"><a class="header-anchor" href="#vue3-x" aria-hidden="true">#</a> vue3.x</h3><p>通过 proxy 对对象进行代理 get时, 执行track 把 effect 注册到 dep map (依赖集)中 set时, 执行trigger, 把依赖集中 所有effect执行一遍</p><p>weakmap = key -&gt;target目标对象 value -&gt; deps map depsmap = key -&gt; 目标对象的属性 value -&gt; set() effect list</p><h3 id="vue2-3-响应式原理的区别" tabindex="-1"><a class="header-anchor" href="#vue2-3-响应式原理的区别" aria-hidden="true">#</a> vue2 3 响应式原理的区别</h3><p>2.x中，通过object.defineProperty 将对象的属性转换成getter/setter 的形式来监听他们的变化，当读取属性值的时候会触发getter进行依赖收集，当设置对象属性值时会触发setter,对依赖的订阅者发送通知, 从而进行更新</p><p>3.x 通过 Proxy 对数据实现 getter/setter 代理，从而实现响应式数据，然后在副作用函数中读取响应式数据的时候，就会触发 Proxy 的 getter，在 getter 里面把对当前的副作用函数保存起来，将来对应响应式数据发生更改的话，则把之前保存起来的副作用函数取出来执行</p><p>您好，我想应聘贵司的前端开发岗位, 期盼回复 谢谢</p>',40),o=[r];function s(n,u){return l(),e("div",null,o)}const h=i(a,[["render",s],["__file","between_2_and_3.html.vue"]]);export{h as default};

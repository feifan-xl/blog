import{_ as s,o,c as a,a as e,b as t}from"./app-5e6e879c.js";const i={},n=e("h3",{id:"使用及原理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用及原理","aria-hidden":"true"},"#"),t(" 使用及原理")],-1),r=e("p",null,"将应用的状态分解为多个独立的store, 并通过 provide/inject机制来将它们注入到vue组件中",-1),u=e("p",null,"通过defineStore 定义一个store, 该函数接收两个参数: 一个名为id的字符串,用于标识store, 以及一个state对象 用于定义该store的状态 在组件中 可以使用 $store 访问这些store, 并通过computed 属性来监听他们的变化",-1),_=e("p",null,"vue2 需要使用 pinia vue plugin 通过vue框架提供的 mixin 能力对this对象的$pinia属性注入, 从而实现全局数据仓库的共享访问",-1),c=e("h3",{id:"vuex",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vuex","aria-hidden":"true"},"#"),t(" vuex")],-1),d=e("p",null,"state mutations actions 原理: 通过全局注入store对象, 实现组件间状态的共享 vuex是利用vue的mixin混入机制， 在beforeCreate钩子前 注入 vuexlint方法 用来实现store注入到vue组件实例, 并注册了vuex store的引用属性 $store vuex中state状态的响应式， 是借助了vue data的响应式，将state存入vue实例组件中",-1),h=[n,r,u,_,c,d];function l(v,x){return o(),a("div",null,h)}const f=s(i,[["render",l],["__file","pinia _ vuex.html.vue"]]);export{f as default};

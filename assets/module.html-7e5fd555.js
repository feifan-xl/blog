import{_ as n,o as s,c as a,e}from"./app-5e6e879c.js";const p={},o=e(`<h2 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs" aria-hidden="true">#</a> CommonJS</h2><p>CommonJS 模块是为 Node.js 打包 JavaScript 代码的原始方式 通过 <code>.cjs</code> <code>type=commonjs</code> <code>require(&#39;*.js&#39;)</code> 等方式引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Exported from require of module</span>
  exports <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// Not exported, only available in the module</span>

  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ems" tabindex="-1"><a class="header-anchor" href="#ems" aria-hidden="true">#</a> EMS</h2><p>ECMAScript 模块是 官方标准格式<br> 用于打包 JavaScript 代码以供重用。 模块使用各种 import 和 export 语句定义。</p><ul><li>es6 新增 浏览器原生支持 模块</li><li>静态语法 编译阶段就可以确定模块的导入导出哪些变量</li><li>输出的是值的绑定 指向内存地址</li></ul><h2 id="difference-between-commonjs-and-ems" tabindex="-1"><a class="header-anchor" href="#difference-between-commonjs-and-ems" aria-hidden="true">#</a> difference between CommonJS and EMS</h2><ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用 <ul><li>输出的是值的拷贝, 对于基本类型的输出 一旦输出就不会改变(更多的像是传参过程中入参的形式)</li><li>值的引用, import 会生成一个只读引用， 并是不是赋值</li></ul></li><li>CommonJS 模块是运行时加载， ES6 模块是编译时输出接口()</li><li>CommonJS 模块的require()是同步加载模块有缓存，ES6 模块的import命令是异步加载，有一个独立的模块依赖的解析阶段</li><li>CommonJS 支持动态导入, 也就是 require(<code>\${path}/xx.js</code>)</li></ul><p>es6</p><ul><li>动态导入是JavaScript ES2019中新增的语法特性，它可以通过将代码按需导入，从而实现更加高效的加载方式</li></ul><h3 id="esm-cjs-转化" tabindex="-1"><a class="header-anchor" href="#esm-cjs-转化" aria-hidden="true">#</a> esm cjs 转化</h3><p>esm的</p><h3 id="加载原理" tabindex="-1"><a class="header-anchor" href="#加载原理" aria-hidden="true">#</a> 加载原理</h3><p><em>commonjs</em> 在node内部生成一个对象,并缓存数据 无论加载多少次，都只会在第一次加载时运行一次</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Module <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="other-module" tabindex="-1"><a class="header-anchor" href="#other-module" aria-hidden="true">#</a> other Module</h2><p><code>AMD</code> 异步模块规范</p><ul><li>异步加载模块</li><li>依赖前置</li><li>requireJS 实现</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// </span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;math&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">math</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CMD</code> 公共模块规范</p><ul><li>异步加载</li><li>依赖就近</li><li>seaJS</li></ul><p><code>UMD</code> 通用模块定义</p><ul><li>AMD + Commonjs 合体， 保证模块被 amd commonjs 调用</li></ul><h2 id="circular-dependency" tabindex="-1"><a class="header-anchor" href="#circular-dependency" aria-hidden="true">#</a> circular dependency</h2><p>加载机制上的不同 , 但是对于循环加载， 都是执行到哪就加载哪</p><ul><li>CommonJS 加载时执行 出现循环式 只输出已执行部分</li><li>EMS 动态引入，加载为引用地址</li></ul><h3 id="commonjs-1" tabindex="-1"><a class="header-anchor" href="#commonjs-1" aria-hidden="true">#</a> CommonJS</h3><p>CommonJS 模块的重要特性是加载时执行，即脚本代码在require的时候，就会全部执行。一旦出现某个模块被&quot;循环加载&quot;，就只输出已经执行的部分，还未执行的部分不会输出。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">//a.js</span>
  exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在 a.js 之中，b.done = %j&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.js 执行完毕&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//b.js</span>
  exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a已经输出变量done, b继续执行</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在 b.js 之中，a.done = %j&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b.js 执行完毕&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// main.js</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在 main.js 之中, a.done=%j, b.done=%j&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  $ node main<span class="token punctuation">.</span>js

  在 b<span class="token punctuation">.</span>js 之中，a<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span>
  b<span class="token punctuation">.</span>js 执行完毕
  在 a<span class="token punctuation">.</span>js 之中，b<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span>
  a<span class="token punctuation">.</span>js 执行完毕
  在 main<span class="token punctuation">.</span>js 之中<span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token operator">=</span><span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>commonjs 实现原理 每个模块文件上都存在三个变量</p><ul><li>module 记录当前模块信息。</li><li>require 引入模块的方法。</li><li>exports 当前模块导出的属性</li></ul><p>require模块引入与处理 同步加载并执行模块文件， 在执行阶段分析模块依赖 采用dfs的方式 来处理循环引用</p><p>require加载原理 在内存中会存在一个Module对象, 用来存放已加载的模块 require 的对象加载后会被缓存到这个对象上</p><p>exports &amp; module.exports</p><p>exports 是当前模块导出的属性, 是每个文件模块上的入参 所以不能被重新赋值</p><p>module.exports 与 exports 本质上是相同的, 指向的是相同的引用 所以同时声明会发生覆盖</p><p>exports会被初始化为对象，也就是在对象上绑定属性 module.exports更加灵活 可以导出任意类型的</p><p>特点:</p><ul><li>同步加载</li><li>有缓存</li></ul><h3 id="esm" tabindex="-1"><a class="header-anchor" href="#esm" aria-hidden="true">#</a> ESM</h3><p>ES6 模块是<code>动态引用</code>，如果使用import从一个模块加载变量（即import foo from &#39;foo&#39;），那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// a.mjs</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>

  <span class="token comment">// b.mjs</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>

  $ node <span class="token operator">--</span>experimental<span class="token operator">-</span>modules a<span class="token punctuation">.</span>mjs
  b<span class="token punctuation">.</span>mjs
  <span class="token literal-property property">ReferenceError</span><span class="token operator">:</span> foo is not defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更改后:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// a.mjs</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span>
  <span class="token keyword">export</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// b.mjs</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span>
  <span class="token keyword">export</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span class="token punctuation">;</span>

  $ node <span class="token operator">--</span>experimental<span class="token operator">-</span>modules a<span class="token punctuation">.</span>mjs
  b<span class="token punctuation">.</span>mjs
  foo
  a<span class="token punctuation">.</span>mjs
  bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="esm加载规则" tabindex="-1"><a class="header-anchor" href="#esm加载规则" aria-hidden="true">#</a> esm加载规则</h4><p>defer: 渲染完再执行 async: 下载完就执行 type=&quot;module&quot;: 异步加载,渲染后按顺序执行，如果与async一起使用就不会按顺序进行</p>`,48),t=[o];function c(l,i){return s(),a("div",null,t)}const r=n(p,[["render",c],["__file","module.html.vue"]]);export{r as default};

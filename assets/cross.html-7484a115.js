import{_ as e,o as a,c as i,e as l}from"./app-5e6e879c.js";const r={},o=l('<h2 id="why" tabindex="-1"><a class="header-anchor" href="#why" aria-hidden="true">#</a> why</h2><p>浏览器 为了请求安全而引入的基于同源策略的安全特性</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><h3 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> cors</h3><p>在响应头中添加 <code>Access-Control-Allow-*</code> 头，告知浏览器端通过此请求</p><p>分类:</p><ul><li>简单请求</li><li>需预检请求</li></ul><h4 id="简单请求" tabindex="-1"><a class="header-anchor" href="#简单请求" aria-hidden="true">#</a> 简单请求</h4><ul><li>请求方法：GET、HEAD、POST。</li><li>请求头：Accept、Accept-Language、Content-Language、Content-Type。 Content-Type 仅支持：application/x-www-form-urlencoded、multipart/form-data、text/plain。</li></ul><h4 id="需预检请求" tabindex="-1"><a class="header-anchor" href="#需预检请求" aria-hidden="true">#</a> 需预检请求</h4><p>先自动向服务端发送一个 <code>OPTIONS</code> 请求，通过服务端返回的 Access-Control-Allow-* 判定请求是否被允许。</p><p>CORS 引入了以下几个以 Access-Control-Allow-* 开头：</p><ul><li>Access-Control-Allow-Origin 表示允许的来源</li><li>Access-Control-Allow-Methods 表示允许的请求方法</li><li>Access-Control-Allow-Headers 表示允许的请求头</li><li>Access-Control-Allow-Credentials 表示允许携带认证信息</li></ul><h3 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理" aria-hidden="true">#</a> 反向代理</h3><p>服务端做一个转发处理， 将请求从跨域转为同源</p><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h3><p>JSONP 的原理是利用了浏览器加载 JavaScript 资源文件时不受同源策略的限制而实现的</p><h3 id="不常用" tabindex="-1"><a class="header-anchor" href="#不常用" aria-hidden="true">#</a> 不常用</h3><ol><li>postMessage 通过 iframe 进行消息监听</li><li>window.name</li><li>document.domain</li></ol><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2><ol><li>canvas 加载图片时不能跨域</li><li>localstrosage/sessionStorage 跨域</li></ol>',21),c=[o];function n(s,t){return a(),i("div",null,c)}const h=e(r,[["render",n],["__file","cross.html.vue"]]);export{h as default};
